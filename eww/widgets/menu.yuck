;; Music vars
(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)

;; Weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; Apps vars
(defpoll MAILS :interval "5m" `scripts/mails`)

;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)


;; ** Widgets *************************************************************************


;; background
(defwidget bg [] 
	(box :class "bg")
)

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(label :class "face" :halign "center" :xalign 0.5 :yalign 0.5 :text "󰣇")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "true" :hexpand "true" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :text "CPU")
				(scale :class "scale" :min 0 :max 100 :value CPU_USAGE))
			(box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :text "MEM")
				(scale :class "scale" :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :text "BAT")
				(scale :class "scale" :min 0 :max 100 :value BATTERY :active "false")))))

;; clock
(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 10 :space-evenly false :vexpand "false" :hexpand "true" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "center" :wrap "true" :limit-width 5 :text {formattime(timestamp, "%l:%M")}))
		(box :orientation "v" :spacing 0  :hexpand "true" 
			(label :class "time_mer orange" :valign "start" :halign "start" :wrap "false" :limit-width 25 :text {formattime(timestamp, "%p")})
			(label :class "time_day purple" :valign "end" :halign "start" :wrap "false" :limit-width 25 :text {formattime(timestamp, "%a")}))))

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icon pink" :valign "center" :text "󰔟")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "false" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "false" :limit-width 25 :text UPMIN)))))

;; Music
(defwidget music [] 
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(eventbox :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(eventbox :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(eventbox :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))

;; networking
(defwidget networking [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
			(label :class "icon blue" :halign "center" :xalign 0.5 :yalign 0 :text "")
			(box 
				(label :text "Status:") 
				(label :class "label_stat" :text NET_STATUS)
			)
			(box 
				(label :text "Signal:") 
				(label :class "label_stat" :text NET_WIFI)
			)
			(box 
				(label :text "Bober:") 
				(label :class "label_stat" :text TEMP)
			)
		)
	)
)

;; bluetooth
(defwidget bluetooth [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
			(label :class "iconweather" :halign "center" :xalign 0.5 :yalign 0 :text "")
			(box 
				(label :text "Status:") 
				(label :class "label_stat" :text NET_STATUS)
			)
			(box 
				(label :text "Signal:") 
				(label :class "label_stat" :text NET_WIFI)
			)
			(box 
				(label :text "Bober:") 
				(label :class "label_stat" :text TEMP)
			)
		)
	)
)


;; power buttons
(defwidget logout [] 
	(eventbox :onclick "qtile cmd-obj -o cmd -f shutdown" :class "genwin btn"
		:vexpand "false" :hexpand "false" 
		(label :class "btn_logout" :text "󰍃")))
(defwidget sleep [] 
	(eventbox :onclick "systemctl suspend" :class "genwin btn"
		:vexpand "false" :hexpand "false"
		(label :class "btn_sleep" :text "󰤄")))
(defwidget reboot [] 
	(eventbox :onclick "systemctl reboot" :class "genwin btn"
		:vexpand "false" :hexpand "false" 
		(label :class "btn_reboot" :text "󰑓")))
(defwidget poweroff [] 
	(eventbox :onclick "systemctl poweroff" :class "genwin btn"
		:vexpand "false" :hexpand "false" 
		(label :class "btn_poweroff" :text "")))

;; folders
(defwidget folders [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "hddbox" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "true" 
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(eventbox :class "icon" :onclick "scripts/open_apps --fm" "")
			)
			(box :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE))
		)
		(eventbox :onclick "alacritty -e ranger ~/Documents &" :class "folder"
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "folder_icon pink" :text "")
				(label :class "folder pink" :text "Documents")
			))
		(eventbox :onclick "alacritty -e ranger ~/Downloads &" :class "folder"
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "folder_icon green" :text "")
				(label :class "folder green" :text "Downloads")
			))	
		(eventbox :onclick "alacritty -e ranger ~/Projects &" :class "folder"
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "folder_icon orange" :text "")
				(label :class "folder orange" :text "Projects")
			))
		(eventbox :onclick "alacritty -e ranger ~/.dotfiles &" :class "folder"
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "folder_icon blue" :text "")
				(label :class "folder blue" :text "~/.dotfiles")
			))
		(eventbox :onclick "alacritty -e ranger ~/.local &" :class "folder"
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "folder_icon purple" :text "")
				(label :class "folder purple" :text "~/.local")
		))
	)
)


;; ** Windows *************************************************************************

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 150 :y 150 :width 350 :height 440)
					(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 150 :y 605 :width 350 :height 325)
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 150 :width 350 :height 155)
					(clock))

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 320 :width 350 :height 155)
					(uptime))

;; music
(defwindow music :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 490 :width 610 :height 280)
					(music))

;; weather
(defwindow networking :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 880 :y 150 :width 268 :height 325)
					(networking))

(defwindow bluetooth :stacking "fg" :focusable "false" :screen 1 
:geometry (geometry :x 1163 :y 150 :width 267 :height 325)
			(bluetooth))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 150 :width 155 :height 155)
					(logout))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
					(sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 320 :width 155 :height 155)
					(reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1615 :y 320 :width 155 :height 155)
					(poweroff))

;; folders
(defwindow folders :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 490 :width 325 :height 440)
					(folders))